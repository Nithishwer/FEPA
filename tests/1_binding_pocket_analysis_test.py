"""
1_binding_pocket_analysis_test using a minimal dataset.

This test exercises the full FEPA pipeline on a very small subset of data: a
single ABFE replica (van1), a pair of leg windows and a single apo replicate.
It mirrors the logic of ``1_bp_analysis_all_abfe_windows.py`` but overrides the
``van_list`` and ``leg_window_list`` arguments passed to
``load_abfe_paths_for_compound`` so that only the test directories are
accessed.  The configuration used by the test points to the test data
via the ``*_path_template`` fields.


When run in an environment where FEPA and its dependencies (MDAnalysis,
scikit-learn, etc.) are installed, this test will perform the full
featurization, PCA, clustering and plotting steps and assert that the key
output artifacts were written to disk.
"""

import warnings
from Bio import BiopythonDeprecationWarning

warnings.filterwarnings("ignore", category=BiopythonDeprecationWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning, module="MDAnalysis.*")
warnings.filterwarnings("ignore", category=DeprecationWarning, module=".*importlib.*")



import os
from pathlib import Path
import builtins
from typing import Literal

import pytest


builtins.Literal = Literal

from fepa.utils.file_utils import load_config
from fepa.core.ensemble_handler import EnsembleHandler
from fepa.utils.path_utils import load_abfe_paths_for_compound
from fepa.flows import binding_pocket_analysis_workflow

@pytest.mark.integration
def test_minimal_bp_analysis(tmp_path):
    """Run the binding pocket analysis on a minimal test dataset."""
    # Locate the test configuration file.
    test_root = Path(__file__).resolve().parents[1]
    config_path = test_root / "tests" / "test_config" / "config.json"
    assert config_path.exists(), f"Missing configuration file: {config_path}"
    config = load_config(str(config_path))

    # Use the first compound listed in the config.
    cmp = config["compounds"][0]

    # Create an output directory in tmp_path.
    analysis_output_dir = tmp_path / "a1_binding_pocket_analysis_apo_holo_reus" / "wdir"
    cmp_output_dir = analysis_output_dir / cmp
    os.makedirs(cmp_output_dir, exist_ok=True)

    # Only one replica and two Coulomb windows.
    van_list = [1]
    leg_window_list = [f"coul.{i:02}" for i in range(2)]

    # Build the path dictionary, including apo=True.
    path_dict = load_abfe_paths_for_compound(
        config,
        cmp,
        van_list=van_list,
        leg_window_list=leg_window_list,
        bp_selection_string="name CA and resid " + config["pocket_residues_string"],
        apo=True,
    )

    # Remove apo_2 and apo_3 if present.
    for key in list(path_dict.keys()):
        if key.startswith("apo_") and key != "apo_1":
            del path_dict[key]

    # Run the analysis pipeline.
    ensemble_handler = EnsembleHandler(path_dict)
    workflow = binding_pocket_analysis_workflow(cmp, ensemble_handler)
    workflow.check_consistency()
    workflow.featurize(str(cmp_output_dir))
    workflow.reduce_dimensions(str(cmp_output_dir))
    workflow.cluster_pca(n_clusters=2, n_components=2)
    workflow.plot_pca_cluster(str(cmp_output_dir))
    workflow.load_results(str(cmp_output_dir))
    workflow.plot_holo_pca(str(cmp_output_dir))
    workflow.plot_apo_holo_pca(str(cmp_output_dir), apo_list=["apo_1"])
    workflow.plot_apo_abfe_pca(str(cmp_output_dir))

    # Verify expected outputs exist.
    assert (cmp_output_dir / "pca_projection_df.csv").exists(), "Missing PCA projection file"
    png_files = list(cmp_output_dir.glob("*.png"))
    assert png_files, "No plots were generated by the analysis"
